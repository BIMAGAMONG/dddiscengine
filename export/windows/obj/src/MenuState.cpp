// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_AssetPaths
#include <AssetPaths.h>
#endif
#ifndef INCLUDED_MenuState
#include <MenuState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxBackdrop
#include <flixel/addons/display/FlxBackdrop.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSoundGroup
#include <flixel/sound/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_typeLimit__NextState_NextState_Impl_
#include <flixel/util/typeLimit/_NextState/NextState_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_system_System
#include <openfl/system/System.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1f119275e66a7b90_27_new,"MenuState","new",0xe563b1c4,"MenuState.new","MenuState.hx",27,0xdfbcb22c)
static const ::String _hx_array_data_c0b6bfd2_1[] = {
	HX_("Monika is not watching you code, thank me for your security.",71,d5,0d,f3),HX_("PINGAS",e4,f3,91,38),HX_("Doki Doki Takeover Moment",c5,b5,f4,b2),
};
static const ::String _hx_array_data_c0b6bfd2_2[] = {
	HX_("Start",42,e4,38,17),HX_("Side Stories",0a,24,ee,ba),HX_("Settings",03,39,ef,64),HX_("Credits",fa,35,af,e0),HX_("Quit",ef,6b,e3,35),
};
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_69_create,"MenuState","create",0xe57b7c18,"MenuState.create","MenuState.hx",69,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_137_update,"MenuState","update",0xf0719b25,"MenuState.update","MenuState.hx",137,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_160_update,"MenuState","update",0xf0719b25,"MenuState.update","MenuState.hx",160,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_203_startIntro,"MenuState","startIntro",0xf30a75c6,"MenuState.startIntro","MenuState.hx",203,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_211_startIntro,"MenuState","startIntro",0xf30a75c6,"MenuState.startIntro","MenuState.hx",211,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_208_startIntro,"MenuState","startIntro",0xf30a75c6,"MenuState.startIntro","MenuState.hx",208,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_196_startIntro,"MenuState","startIntro",0xf30a75c6,"MenuState.startIntro","MenuState.hx",196,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_221_initiateMainMenu,"MenuState","initiateMainMenu",0x0c10720d,"MenuState.initiateMainMenu","MenuState.hx",221,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_228_initiateMainMenu,"MenuState","initiateMainMenu",0x0c10720d,"MenuState.initiateMainMenu","MenuState.hx",228,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_219_initiateMainMenu,"MenuState","initiateMainMenu",0x0c10720d,"MenuState.initiateMainMenu","MenuState.hx",219,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_54_boot,"MenuState","boot",0xc9f0da4e,"MenuState.boot","MenuState.hx",54,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_66_boot,"MenuState","boot",0xc9f0da4e,"MenuState.boot","MenuState.hx",66,0xdfbcb22c)

void MenuState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_1f119275e66a7b90_27_new)
HXLINE(  60)		this->splashTextArray = ::Array_obj< ::String >::fromData( _hx_array_data_c0b6bfd2_1,3);
HXLINE(  58)		this->optionsArray = ::Array_obj< ::String >::fromData( _hx_array_data_c0b6bfd2_2,5);
HXLINE(  56)		this->introFinished = false;
HXLINE(  47)		this->curSelected = 0;
HXLINE(  27)		super::__construct();
            	}

Dynamic MenuState_obj::__CreateEmpty() { return new MenuState_obj; }

void *MenuState_obj::_hx_vtable = 0;

Dynamic MenuState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MenuState_obj > _hx_result = new MenuState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MenuState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x32c1072e) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x32c1072e;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void MenuState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_1f119275e66a7b90_69_create)
HXLINE(  70)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE(  72)		if (::hx::IsNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(  74)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(  74)			_hx_tmp->playMusic(::AssetPaths_obj::getPath(((HX_("music/",ea,bf,1b,3f) + HX_("mainmenu",58,8e,02,b6)) + HX_(".ogg",e1,64,bc,1e))),null(),null(),null());
            		}
HXLINE(  77)		int number = ::flixel::FlxG_obj::random->_hx_int(0,2,null());
HXLINE(  79)		this->splashMessage =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,100,330,0,HX_("",00,00,00,00),null(),null());
HXLINE(  80)		this->splashMessage->setFormat(HX_("assets/fonts/RifficFree-Bold.ttf",96,5a,73,21),-1,null(),HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(  81)		this->splashMessage->set_size(25);
HXLINE(  82)		this->splashMessage->set_alpha(( (Float)(0) ));
HXLINE(  83)		this->splashMessage->set_text(this->splashTextArray->__get(number));
HXLINE(  85)		 ::flixel::FlxSprite _hx_tmp1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,100,100,null());
HXDLIN(  85)		this->logoSplash = _hx_tmp1->loadGraphic(::AssetPaths_obj::getPath(((HX_("images/menus/",72,13,78,5f) + HX_("main_menu/splashLogo",dc,6a,40,c6)) + HX_(".png",3b,2d,bd,1e))),null(),null(),null(),null(),null());
HXLINE(  86)		{
HXLINE(  86)			 ::flixel::FlxSprite _this = this->logoSplash;
HXDLIN(  86)			int axes = 17;
HXDLIN(  86)			bool _hx_tmp2;
HXDLIN(  86)			if ((axes != 1)) {
HXLINE(  86)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE(  86)				_hx_tmp2 = true;
            			}
HXDLIN(  86)			if (_hx_tmp2) {
HXLINE(  86)				int _hx_tmp3 = ::flixel::FlxG_obj::width;
HXDLIN(  86)				_this->set_x(((( (Float)(_hx_tmp3) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  86)			bool _hx_tmp4;
HXDLIN(  86)			if ((axes != 16)) {
HXLINE(  86)				_hx_tmp4 = (axes == 17);
            			}
            			else {
HXLINE(  86)				_hx_tmp4 = true;
            			}
HXDLIN(  86)			if (_hx_tmp4) {
HXLINE(  86)				int _hx_tmp5 = ::flixel::FlxG_obj::height;
HXDLIN(  86)				_this->set_y(((( (Float)(_hx_tmp5) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  87)		this->logoSplash->set_alpha(( (Float)(0) ));
HXLINE(  89)		this->menuOptions =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,-200,436,0,HX_("",00,00,00,00),null(),null());
HXLINE(  90)		this->menuOptions->setFormat(HX_("assets/fonts/RifficFree-Bold.ttf",96,5a,73,21),-1,null(),HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-65281,null());
HXLINE(  91)		this->menuOptions->set_size(70);
HXLINE(  93)		this->uparrow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(this->menuOptions->x - ( (Float)(300) )),200,null());
HXLINE(  94)		 ::flixel::FlxSprite _hx_tmp6 = this->uparrow;
HXDLIN(  94)		_hx_tmp6->loadGraphic(::AssetPaths_obj::getPath(((HX_("images/menus/",72,13,78,5f) + HX_("main_menu/arrow",9f,33,d3,7f)) + HX_(".png",3b,2d,bd,1e))),null(),null(),null(),null(),null());
HXLINE(  95)		 ::flixel::FlxSprite _hx_tmp7 = this->uparrow;
HXDLIN(  95)		_hx_tmp7->setGraphicSize(::Std_obj::_hx_int((this->uparrow->get_width() / ( (Float)(7) ))),null());
HXLINE(  97)		this->downarrow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(this->menuOptions->x - ( (Float)(300) )),260,null());
HXLINE(  98)		 ::flixel::FlxSprite _hx_tmp8 = this->downarrow;
HXDLIN(  98)		_hx_tmp8->loadGraphic(::AssetPaths_obj::getPath(((HX_("images/menus/",72,13,78,5f) + HX_("main_menu/arrow",9f,33,d3,7f)) + HX_(".png",3b,2d,bd,1e))),null(),null(),null(),null(),null());
HXLINE(  99)		 ::flixel::FlxSprite _hx_tmp9 = this->downarrow;
HXDLIN(  99)		_hx_tmp9->setGraphicSize(::Std_obj::_hx_int((this->downarrow->get_width() / ( (Float)(7) ))),null());
HXLINE( 100)		this->downarrow->set_angle(( (Float)(180) ));
HXLINE( 102)		this->logo =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-500,-100,null());
HXLINE( 103)		 ::flixel::FlxSprite _hx_tmp10 = this->logo;
HXDLIN( 103)		_hx_tmp10->loadGraphic(::AssetPaths_obj::getPath(((HX_("images/menus/",72,13,78,5f) + HX_("main_menu/discEngineLogo",6c,3f,99,39)) + HX_(".png",3b,2d,bd,1e))),null(),null(),null(),null(),null());
HXLINE( 104)		 ::flixel::FlxSprite _hx_tmp11 = this->logo;
HXDLIN( 104)		_hx_tmp11->setGraphicSize(::Std_obj::_hx_int((this->logo->get_width() * ((Float)0.5))),null());
HXLINE( 106)		this->speen =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,100,100,null());
HXLINE( 107)		 ::flixel::FlxSprite _hx_tmp12 = this->speen;
HXDLIN( 107)		_hx_tmp12->loadGraphic(::AssetPaths_obj::getPath(((HX_("images/menus/",72,13,78,5f) + HX_("main_menu/selectionPlate",14,43,3a,a4)) + HX_(".png",3b,2d,bd,1e))),null(),null(),null(),null(),null());
HXLINE( 108)		{
HXLINE( 108)			 ::flixel::FlxSprite _this1 = this->speen;
HXDLIN( 108)			int axes1 = 17;
HXDLIN( 108)			bool _hx_tmp13;
HXDLIN( 108)			if ((axes1 != 1)) {
HXLINE( 108)				_hx_tmp13 = (axes1 == 17);
            			}
            			else {
HXLINE( 108)				_hx_tmp13 = true;
            			}
HXDLIN( 108)			if (_hx_tmp13) {
HXLINE( 108)				int _hx_tmp14 = ::flixel::FlxG_obj::width;
HXDLIN( 108)				_this1->set_x(((( (Float)(_hx_tmp14) ) - _this1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 108)			bool _hx_tmp15;
HXDLIN( 108)			if ((axes1 != 16)) {
HXLINE( 108)				_hx_tmp15 = (axes1 == 17);
            			}
            			else {
HXLINE( 108)				_hx_tmp15 = true;
            			}
HXDLIN( 108)			if (_hx_tmp15) {
HXLINE( 108)				int _hx_tmp16 = ::flixel::FlxG_obj::height;
HXDLIN( 108)				_this1->set_y(((( (Float)(_hx_tmp16) ) - _this1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 109)		 ::flixel::FlxSprite fh = this->speen;
HXDLIN( 109)		fh->set_x((fh->x - ( (Float)(1220) )));
HXLINE( 111)		this->circles =  ::flixel::addons::display::FlxBackdrop_obj::__alloc( HX_CTX ,null(),17,0,0);
HXLINE( 112)		 ::flixel::addons::display::FlxBackdrop _hx_tmp17 = this->circles;
HXDLIN( 112)		_hx_tmp17->loadGraphic(::AssetPaths_obj::getPath(((HX_("images/menus/",72,13,78,5f) + HX_("main_menu/menu_circle",46,7e,a8,fc)) + HX_(".png",3b,2d,bd,1e))),null(),null(),null(),null(),null());
HXLINE( 113)		this->circles->updateHitbox();
HXLINE( 114)		 ::flixel::addons::display::FlxBackdrop _hx_tmp18 = this->circles;
HXDLIN( 114)		_hx_tmp18->setGraphicSize(::Std_obj::_hx_int((this->circles->get_width() * ((Float)0.2))),null());
HXLINE( 115)		{
HXLINE( 115)			 ::flixel::addons::display::FlxBackdrop _this2 = this->circles;
HXDLIN( 115)			int axes2 = 1;
HXDLIN( 115)			bool _hx_tmp19;
HXDLIN( 115)			if ((axes2 != 1)) {
HXLINE( 115)				_hx_tmp19 = (axes2 == 17);
            			}
            			else {
HXLINE( 115)				_hx_tmp19 = true;
            			}
HXDLIN( 115)			if (_hx_tmp19) {
HXLINE( 115)				int _hx_tmp20 = ::flixel::FlxG_obj::width;
HXDLIN( 115)				_this2->set_x(((( (Float)(_hx_tmp20) ) - _this2->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 115)			bool _hx_tmp21;
HXDLIN( 115)			if ((axes2 != 16)) {
HXLINE( 115)				_hx_tmp21 = (axes2 == 17);
            			}
            			else {
HXLINE( 115)				_hx_tmp21 = true;
            			}
HXDLIN( 115)			if (_hx_tmp21) {
HXLINE( 115)				int _hx_tmp22 = ::flixel::FlxG_obj::height;
HXDLIN( 115)				_this2->set_y(((( (Float)(_hx_tmp22) ) - _this2->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 117)		this->add(this->circles);
HXLINE( 118)		this->add(this->speen);
HXLINE( 119)		this->add(this->logo);
HXLINE( 120)		this->add(this->menuOptions);
HXLINE( 121)		this->add(this->uparrow);
HXLINE( 122)		this->add(this->downarrow);
HXLINE( 123)		this->add(this->splashMessage);
HXLINE( 124)		this->add(this->logoSplash);
HXLINE( 126)		this->super::create();
HXLINE( 128)		if ((::MenuState_obj::doIntro == true)) {
HXLINE( 129)			this->startIntro();
            		}
            		else {
HXLINE( 132)			this->initiateMainMenu();
            		}
            	}


void MenuState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_1f119275e66a7b90_137_update)
HXLINE( 138)		{
HXLINE( 138)			 ::flixel::FlxSprite _this = this->speen;
HXDLIN( 138)			int axes = 16;
HXDLIN( 138)			bool _hx_tmp;
HXDLIN( 138)			if ((axes != 1)) {
HXLINE( 138)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE( 138)				_hx_tmp = true;
            			}
HXDLIN( 138)			if (_hx_tmp) {
HXLINE( 138)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN( 138)				_this->set_x(((( (Float)(_hx_tmp1) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 138)			bool _hx_tmp2;
HXDLIN( 138)			if ((axes != 16)) {
HXLINE( 138)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE( 138)				_hx_tmp2 = true;
            			}
HXDLIN( 138)			if (_hx_tmp2) {
HXLINE( 138)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN( 138)				_this->set_y(((( (Float)(_hx_tmp3) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 139)		 ::flixel::FlxSprite fh = this->speen;
HXDLIN( 139)		fh->set_angle((fh->angle + (elapsed * ( (Float)(15) ))));
HXLINE( 141)		this->circles->velocity->set_x(( (Float)(10) ));
HXLINE( 142)		this->circles->velocity->set_y(( (Float)(25) ));
HXLINE( 144)		this->menuOptions->set_text(this->optionsArray->__get(this->curSelected));
HXLINE( 146)		if (this->introFinished) {
HXLINE( 147)			bool _hx_tmp4;
HXDLIN( 147)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 147)			if (!(_this1->keyManager->checkStatusUnsafe(38,_this1->status))) {
HXLINE( 147)				_hx_tmp4 = (::flixel::FlxG_obj::mouse->wheel > 0);
            			}
            			else {
HXLINE( 147)				_hx_tmp4 = true;
            			}
HXDLIN( 147)			if (_hx_tmp4) {
HXLINE( 147)				 ::MenuState _hx_tmp5 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 147)				_hx_tmp5->curSelected = (_hx_tmp5->curSelected - 1);
            			}
HXLINE( 149)			bool _hx_tmp6;
HXDLIN( 149)			 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 149)			if (!(_this2->keyManager->checkStatusUnsafe(40,_this2->status))) {
HXLINE( 149)				_hx_tmp6 = (::flixel::FlxG_obj::mouse->wheel < 0);
            			}
            			else {
HXLINE( 149)				_hx_tmp6 = true;
            			}
HXDLIN( 149)			if (_hx_tmp6) {
HXLINE( 149)				 ::MenuState _hx_tmp7 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 149)				_hx_tmp7->curSelected = (_hx_tmp7->curSelected + 1);
            			}
HXLINE( 151)			if ((this->curSelected < 0)) {
HXLINE( 151)				this->curSelected = 0;
            			}
HXLINE( 153)			if ((this->curSelected > (this->optionsArray->length - 1))) {
HXLINE( 153)				this->curSelected = (this->optionsArray->length - 1);
            			}
HXLINE( 155)			bool _hx_tmp8;
HXDLIN( 155)			 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 155)			if (!(_this3->keyManager->checkStatusUnsafe(13,_this3->status))) {
HXLINE( 155)				 ::flixel::input::mouse::FlxMouseButton _this4 = ::flixel::FlxG_obj::mouse->_leftButton;
HXDLIN( 155)				bool _hx_tmp9;
HXDLIN( 155)				if ((_this4->current != 1)) {
HXLINE( 155)					_hx_tmp9 = (_this4->current == 2);
            				}
            				else {
HXLINE( 155)					_hx_tmp9 = true;
            				}
HXDLIN( 155)				if (_hx_tmp9) {
HXLINE( 155)					_hx_tmp8 = ::flixel::FlxG_obj::mouse->overlaps(this->menuOptions,null());
            				}
            				else {
HXLINE( 155)					_hx_tmp8 = false;
            				}
            			}
            			else {
HXLINE( 155)				_hx_tmp8 = true;
            			}
HXDLIN( 155)			if (_hx_tmp8) {
HXLINE( 157)				::String _hx_switch_0 = this->menuOptions->text;
            				if (  (_hx_switch_0==HX_("Credits",fa,35,af,e0)) ){
HXLINE( 166)					::haxe::Log_obj::trace(HX_("CREDITS",fa,e1,31,93),::hx::SourceInfo(HX_("source/MenuState.hx",20,5f,da,e4),166,HX_("MenuState",d2,bf,b6,c0),HX_("update",09,86,05,87)));
HXDLIN( 166)					goto _hx_goto_4;
            				}
            				if (  (_hx_switch_0==HX_("Quit",ef,6b,e3,35)) ){
HXLINE( 168)					::haxe::Log_obj::trace(HX_("QUIT GAME",e3,95,ad,c9),::hx::SourceInfo(HX_("source/MenuState.hx",20,5f,da,e4),168,HX_("MenuState",d2,bf,b6,c0),HX_("update",09,86,05,87)));
HXLINE( 169)					::openfl::_hx_system::System_obj::exit(0);
HXLINE( 167)					goto _hx_goto_4;
            				}
            				if (  (_hx_switch_0==HX_("Settings",03,39,ef,64)) ){
HXLINE( 164)					::haxe::Log_obj::trace(HX_("OPTIONS",3e,07,d2,5f),::hx::SourceInfo(HX_("source/MenuState.hx",20,5f,da,e4),164,HX_("MenuState",d2,bf,b6,c0),HX_("update",09,86,05,87)));
HXDLIN( 164)					goto _hx_goto_4;
            				}
            				if (  (_hx_switch_0==HX_("Side Stories",0a,24,ee,ba)) ){
HXLINE( 162)					::haxe::Log_obj::trace(HX_("SIDE STORIES",ea,4b,27,ea),::hx::SourceInfo(HX_("source/MenuState.hx",20,5f,da,e4),162,HX_("MenuState",d2,bf,b6,c0),HX_("update",09,86,05,87)));
HXDLIN( 162)					goto _hx_goto_4;
            				}
            				if (  (_hx_switch_0==HX_("Start",42,e4,38,17)) ){
HXLINE( 160)					 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromState( ::PlayState_obj::__alloc( HX_CTX ));
HXDLIN( 160)					 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN( 160)					bool _hx_tmp10;
HXDLIN( 160)					if (::Std_obj::isOfType(nextState,::hx::ClassOf< ::flixel::FlxState >())) {
HXLINE( 160)						_hx_tmp10 = ::flixel::FlxG_obj::canSwitchTo(( ( ::flixel::FlxState)(nextState) ));
            					}
            					else {
HXLINE( 160)						_hx_tmp10 = true;
            					}
HXDLIN( 160)					if (_hx_tmp10) {
            						HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            						void _hx_run(){
            							HX_GC_STACKFRAME(&_hx_pos_1f119275e66a7b90_160_update)
HXLINE( 160)							if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE( 160)								::flixel::FlxG_obj::game->_nextState = nextState;
            							}
            							else {
HXLINE( 160)								::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
            							}
            						}
            						HX_END_LOCAL_FUNC0((void))

HXLINE( 160)						::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_0(nextState,stateOnCall)));
            					}
HXDLIN( 160)					goto _hx_goto_4;
            				}
            				_hx_goto_4:;
            			}
HXLINE( 173)			switch((int)(this->curSelected)){
            				case (int)0: {
HXLINE( 176)					this->uparrow->set_alpha(( (Float)(0) ));
            				}
            				break;
            				case (int)4: {
HXLINE( 178)					this->downarrow->set_alpha(( (Float)(0) ));
            				}
            				break;
            				default:{
HXLINE( 180)					this->uparrow->set_alpha(( (Float)(1) ));
HXLINE( 181)					this->downarrow->set_alpha(( (Float)(1) ));
            				}
            			}
HXLINE( 184)			if (::flixel::FlxG_obj::mouse->overlaps(this->menuOptions,null())) {
HXLINE( 185)				this->menuOptions->set_color(-256);
            			}
            			else {
HXLINE( 188)				this->menuOptions->set_color(-1);
            			}
            		}
HXLINE( 192)		this->super::update(elapsed);
            	}


void MenuState_obj::startIntro(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::MenuState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer timer){
            			HX_GC_STACKFRAME(&_hx_pos_1f119275e66a7b90_203_startIntro)
HXLINE( 203)			::flixel::tweens::FlxTween_obj::tween(_gthis->logoSplash, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),0)),1,null());
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::MenuState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer timer){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::MenuState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer timer){
            				HX_GC_STACKFRAME(&_hx_pos_1f119275e66a7b90_211_startIntro)
HXLINE( 212)				::flixel::tweens::FlxTween_obj::tween(_gthis->splashMessage, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("alpha",5e,a7,96,21),0)),1,null());
HXLINE( 213)				_gthis->initiateMainMenu();
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_GC_STACKFRAME(&_hx_pos_1f119275e66a7b90_208_startIntro)
HXLINE( 209)			::flixel::tweens::FlxTween_obj::tween(_gthis->splashMessage, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),1)),1,null());
HXLINE( 210)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(2, ::Dynamic(new _hx_Closure_1(_gthis)),null());
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_1f119275e66a7b90_196_startIntro)
HXDLIN( 196)		 ::MenuState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 198)		::flixel::tweens::FlxTween_obj::tween(this->logoSplash, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),1)),1,null());
HXLINE( 201)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(2, ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE( 207)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(3, ::Dynamic(new _hx_Closure_2(_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(MenuState_obj,startIntro,(void))

void MenuState_obj::initiateMainMenu(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::MenuState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer timer){
            			HX_GC_STACKFRAME(&_hx_pos_1f119275e66a7b90_221_initiateMainMenu)
HXLINE( 222)			_gthis->remove(_gthis->logoSplash,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 223)			_gthis->remove(_gthis->splashMessage,null()).StaticCast<  ::flixel::FlxBasic >();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::MenuState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer timer){
            			HX_GC_STACKFRAME(&_hx_pos_1f119275e66a7b90_228_initiateMainMenu)
HXLINE( 229)			_gthis->introFinished = true;
HXLINE( 230)			::flixel::tweens::FlxTween_obj::tween(_gthis->speen, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("x",78,00,00,00),-600)
            				->setFixed(1,HX_("y",79,00,00,00),-100)),4, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circOut_dyn())));
HXLINE( 231)			::flixel::tweens::FlxTween_obj::tween(_gthis->logo, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("x",78,00,00,00),-50)
            				->setFixed(1,HX_("y",79,00,00,00),-100)),4, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circOut_dyn())));
HXLINE( 232)			::flixel::tweens::FlxTween_obj::tween(_gthis->menuOptions, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("x",78,00,00,00),100)
            				->setFixed(1,HX_("y",79,00,00,00),436)),4, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circOut_dyn())));
HXLINE( 233)			::flixel::tweens::FlxTween_obj::tween(_gthis->uparrow, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("x",78,00,00,00),-200)
            				->setFixed(1,HX_("y",79,00,00,00),200)),4, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circOut_dyn())));
HXLINE( 234)			::flixel::tweens::FlxTween_obj::tween(_gthis->downarrow, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("x",78,00,00,00),-200)
            				->setFixed(1,HX_("y",79,00,00,00),260)),4, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circOut_dyn())));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_1f119275e66a7b90_219_initiateMainMenu)
HXDLIN( 219)		 ::MenuState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 220)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE( 227)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(2, ::Dynamic(new _hx_Closure_1(_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(MenuState_obj,initiateMainMenu,(void))

bool MenuState_obj::initialized;

bool MenuState_obj::doIntro;


::hx::ObjectPtr< MenuState_obj > MenuState_obj::__new() {
	::hx::ObjectPtr< MenuState_obj > __this = new MenuState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< MenuState_obj > MenuState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	MenuState_obj *__this = (MenuState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MenuState_obj), true, "MenuState"));
	*(void **)__this = MenuState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

MenuState_obj::MenuState_obj()
{
}

void MenuState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MenuState);
	HX_MARK_MEMBER_NAME(splashMessage,"splashMessage");
	HX_MARK_MEMBER_NAME(logoSplash,"logoSplash");
	HX_MARK_MEMBER_NAME(speen,"speen");
	HX_MARK_MEMBER_NAME(circles,"circles");
	HX_MARK_MEMBER_NAME(logo,"logo");
	HX_MARK_MEMBER_NAME(curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(menuOptions,"menuOptions");
	HX_MARK_MEMBER_NAME(uparrow,"uparrow");
	HX_MARK_MEMBER_NAME(downarrow,"downarrow");
	HX_MARK_MEMBER_NAME(introFinished,"introFinished");
	HX_MARK_MEMBER_NAME(optionsArray,"optionsArray");
	HX_MARK_MEMBER_NAME(splashTextArray,"splashTextArray");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MenuState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(splashMessage,"splashMessage");
	HX_VISIT_MEMBER_NAME(logoSplash,"logoSplash");
	HX_VISIT_MEMBER_NAME(speen,"speen");
	HX_VISIT_MEMBER_NAME(circles,"circles");
	HX_VISIT_MEMBER_NAME(logo,"logo");
	HX_VISIT_MEMBER_NAME(curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(menuOptions,"menuOptions");
	HX_VISIT_MEMBER_NAME(uparrow,"uparrow");
	HX_VISIT_MEMBER_NAME(downarrow,"downarrow");
	HX_VISIT_MEMBER_NAME(introFinished,"introFinished");
	HX_VISIT_MEMBER_NAME(optionsArray,"optionsArray");
	HX_VISIT_MEMBER_NAME(splashTextArray,"splashTextArray");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MenuState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"logo") ) { return ::hx::Val( logo ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speen") ) { return ::hx::Val( speen ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"circles") ) { return ::hx::Val( circles ); }
		if (HX_FIELD_EQ(inName,"uparrow") ) { return ::hx::Val( uparrow ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"downarrow") ) { return ::hx::Val( downarrow ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"logoSplash") ) { return ::hx::Val( logoSplash ); }
		if (HX_FIELD_EQ(inName,"startIntro") ) { return ::hx::Val( startIntro_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { return ::hx::Val( curSelected ); }
		if (HX_FIELD_EQ(inName,"menuOptions") ) { return ::hx::Val( menuOptions ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"optionsArray") ) { return ::hx::Val( optionsArray ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"splashMessage") ) { return ::hx::Val( splashMessage ); }
		if (HX_FIELD_EQ(inName,"introFinished") ) { return ::hx::Val( introFinished ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"splashTextArray") ) { return ::hx::Val( splashTextArray ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"initiateMainMenu") ) { return ::hx::Val( initiateMainMenu_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MenuState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"doIntro") ) { outValue = ( doIntro ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { outValue = ( initialized ); return true; }
	}
	return false;
}

::hx::Val MenuState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"logo") ) { logo=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speen") ) { speen=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"circles") ) { circles=inValue.Cast<  ::flixel::addons::display::FlxBackdrop >(); return inValue; }
		if (HX_FIELD_EQ(inName,"uparrow") ) { uparrow=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"downarrow") ) { downarrow=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"logoSplash") ) { logoSplash=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"menuOptions") ) { menuOptions=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"optionsArray") ) { optionsArray=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"splashMessage") ) { splashMessage=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"introFinished") ) { introFinished=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"splashTextArray") ) { splashTextArray=inValue.Cast< ::Array< ::String > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MenuState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"doIntro") ) { doIntro=ioValue.Cast< bool >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { initialized=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void MenuState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("splashMessage",20,e7,97,b9));
	outFields->push(HX_("logoSplash",32,77,5e,95));
	outFields->push(HX_("speen",91,97,69,81));
	outFields->push(HX_("circles",63,5c,b6,f5));
	outFields->push(HX_("logo",6b,9f,b7,47));
	outFields->push(HX_("curSelected",fb,eb,ab,32));
	outFields->push(HX_("menuOptions",7f,97,2d,31));
	outFields->push(HX_("uparrow",8e,29,d7,ee));
	outFields->push(HX_("downarrow",27,de,77,a8));
	outFields->push(HX_("introFinished",fe,65,93,c7));
	outFields->push(HX_("optionsArray",5b,b5,f1,e8));
	outFields->push(HX_("splashTextArray",45,77,15,d2));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MenuState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MenuState_obj,splashMessage),HX_("splashMessage",20,e7,97,b9)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuState_obj,logoSplash),HX_("logoSplash",32,77,5e,95)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuState_obj,speen),HX_("speen",91,97,69,81)},
	{::hx::fsObject /*  ::flixel::addons::display::FlxBackdrop */ ,(int)offsetof(MenuState_obj,circles),HX_("circles",63,5c,b6,f5)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuState_obj,logo),HX_("logo",6b,9f,b7,47)},
	{::hx::fsInt,(int)offsetof(MenuState_obj,curSelected),HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MenuState_obj,menuOptions),HX_("menuOptions",7f,97,2d,31)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuState_obj,uparrow),HX_("uparrow",8e,29,d7,ee)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuState_obj,downarrow),HX_("downarrow",27,de,77,a8)},
	{::hx::fsBool,(int)offsetof(MenuState_obj,introFinished),HX_("introFinished",fe,65,93,c7)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(MenuState_obj,optionsArray),HX_("optionsArray",5b,b5,f1,e8)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(MenuState_obj,splashTextArray),HX_("splashTextArray",45,77,15,d2)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo MenuState_obj_sStaticStorageInfo[] = {
	{::hx::fsBool,(void *) &MenuState_obj::initialized,HX_("initialized",14,f5,0f,37)},
	{::hx::fsBool,(void *) &MenuState_obj::doIntro,HX_("doIntro",e1,aa,4d,f1)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String MenuState_obj_sMemberFields[] = {
	HX_("splashMessage",20,e7,97,b9),
	HX_("logoSplash",32,77,5e,95),
	HX_("speen",91,97,69,81),
	HX_("circles",63,5c,b6,f5),
	HX_("logo",6b,9f,b7,47),
	HX_("curSelected",fb,eb,ab,32),
	HX_("menuOptions",7f,97,2d,31),
	HX_("uparrow",8e,29,d7,ee),
	HX_("downarrow",27,de,77,a8),
	HX_("introFinished",fe,65,93,c7),
	HX_("optionsArray",5b,b5,f1,e8),
	HX_("splashTextArray",45,77,15,d2),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("startIntro",aa,a2,37,da),
	HX_("initiateMainMenu",f1,61,84,cc),
	::String(null()) };

static void MenuState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MenuState_obj::initialized,"initialized");
	HX_MARK_MEMBER_NAME(MenuState_obj::doIntro,"doIntro");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MenuState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MenuState_obj::initialized,"initialized");
	HX_VISIT_MEMBER_NAME(MenuState_obj::doIntro,"doIntro");
};

#endif

::hx::Class MenuState_obj::__mClass;

static ::String MenuState_obj_sStaticFields[] = {
	HX_("initialized",14,f5,0f,37),
	HX_("doIntro",e1,aa,4d,f1),
	::String(null())
};

void MenuState_obj::__register()
{
	MenuState_obj _hx_dummy;
	MenuState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("MenuState",d2,bf,b6,c0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MenuState_obj::__GetStatic;
	__mClass->mSetStaticField = &MenuState_obj::__SetStatic;
	__mClass->mMarkFunc = MenuState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MenuState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MenuState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MenuState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MenuState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MenuState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MenuState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MenuState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_1f119275e66a7b90_54_boot)
HXDLIN(  54)		initialized = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1f119275e66a7b90_66_boot)
HXDLIN(  66)		doIntro = true;
            	}
}

